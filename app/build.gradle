apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    signingConfigs {
        release {}
    }
    buildToolsVersion = sdk.buildTools
    compileSdkVersion sdk.compileSdk
    defaultConfig {
        applicationId "com.skinnydoo.coffeeloc8r"
        minSdkVersion sdk.minSdk
        targetSdkVersion sdk.targetSdk
        versionCode buildVersionCode()
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            buildConfigField("String", "BASE_SERVER_URL", BASE_SERVER_URL)
            resValue("integer", "cache_duration", cache_duration)
            signingConfig signingConfigs.release

            minifyEnabled true
            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
            }
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
            buildConfigField("String", "BASE_SERVER_URL", DEBUG_BASE_SERVER_URL)
            resValue("integer", "cache_duration", cache_duration)

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
    viewBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // UI
    implementation "androidx.appcompat:appcompat:${versions.appcompat}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "androidx.activity:activity-ktx:${versions.activity}"
    implementation "androidx.fragment:fragment-ktx:${versions.fragment}"
    implementation "androidx.exifinterface:exifinterface:${versions.exif}"
    implementation "com.google.android:flexbox:$versions.flexbox"

    // Architecture & Lifecycle component
    implementation "androidx.core:core:${versions.core}"
    implementation "androidx.core:core-ktx:${versions.core}"
    implementation "com.google.android.play:core:${versions.play_core}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
    implementation "androidx.collection:collection-ktx:${versions.collection}"
    implementation "androidx.lifecycle:lifecycle-runtime:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycle}"

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"

    // Dagger components
    implementation "com.google.dagger:dagger:${versions.dagger}"
    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    // Date and time API for Java.
    implementation "com.jakewharton.threetenabp:threetenabp:${versions.threetenabp}"
    testImplementation "org.threeten:threetenbp:${versions.threetenbp}"

    // Firebase
    implementation "com.google.firebase:firebase-analytics:${versions.firebase_analytic}"
    implementation "com.google.firebase:firebase-crashlytics:${versions.firebase_crashlitics}"

    // GSON component
    implementation "com.google.code.gson:gson:${versions.gson}"

    // Glide components
    implementation("com.github.bumptech.glide:okhttp3-integration:${versions.glide}") {
        // exclude Glide’s OkHttp peer-dependency module and define our own module import
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"

    //Material Dialog
    implementation "com.afollestad.material-dialogs:bottomsheets:${versions.material_dialog}"
    implementation "com.afollestad.material-dialogs:core:${versions.material_dialog}"
    implementation "com.afollestad.material-dialogs:input:${versions.material_dialog}"
    implementation "com.afollestad.material-dialogs:lifecycle:${versions.material_dialog}"

    // Leak Canary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0'

    // Location Services components
    implementation "com.google.android.gms:play-services-maps:${versions.play_services}"
    implementation "com.google.android.gms:play-services-location:${versions.play_services}"

    // Navigation component
    implementation "androidx.navigation:navigation-runtime-ktx:$nav_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Okhttp component
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"

    // Retrofit component
    implementation("com.squareup.retrofit2:retrofit:${versions.retrofit}") {
        // exclude Retrofit’s OkHttp peer-dependency module and define our own module import
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"

    // Serialization Runtime
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${versions.serialization}"

    // Timber Logging component
    implementation "com.jakewharton.timber:timber:${versions.timber}"

    // Viewpager2
    implementation "androidx.viewpager2:viewpager2:${versions.viewpager2}"


    // Instrumentation tests
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${versions.espresso}"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
    androidTestImplementation "androidx.test.ext:junit:${versions.testExt}"
    androidTestImplementation "androidx.test:runner:${versions.runner}"
    androidTestImplementation "androidx.test:rules:${versions.rules}"

    // Local unit tests
    testImplementation "junit:junit:${versions.jUnit}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.mockito:mockito-inline:${versions.mockito}"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockitoKotlin}"
    testImplementation "org.hamcrest:hamcrest-library:${versions.hamcrest}"
    testImplementation "androidx.arch.core:core-testing:${versions.archTesting}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
}

androidExtensions {
    experimental = true
}

def propsFile = rootProject.file('keystore.properties')
def configName = 'release'

if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
    def props = new Properties()
    props.load(new FileInputStream(propsFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

        android.signingConfigs[configName].storeFile = file(props['STORE_FILE'])
        android.signingConfigs[configName].storePassword = props['STORE_PASSWORD']
        android.signingConfigs[configName].keyAlias = props['KEY_ALIAS']
        android.signingConfigs[configName].keyPassword = props['KEY_PASSWORD']

    } else {
        println 'keystore.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }

} else {
    println 'keystore.properties not found'
    android.buildTypes.release.signingConfig = null
}
